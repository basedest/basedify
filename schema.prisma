generator client {
  provider = "prisma-client-js"
  previewFeatures = ["reactNative"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./app.db"
}

model User {
  id              Int           @id @default(autoincrement())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  programs        Program[]
  achievements    Achievement[]
  settings        Settings?
}

model Program {
  id          Int       @id @default(autoincrement())
  startDate   DateTime  @default(now())
//   currentDay  Int       @default(1)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  tasks       Task[]
  isActive    Boolean   @default(false)
  isCompleted Boolean   @default(false)
}

// Basic model for task. Not related to any program.
// Tasks are extended from task options and populated with fields related to exact program.
// relations: many tasks -> one taskOption and one program
model TaskOption {
    id          Int       @id @default(autoincrement())
    key         String?   @unique // default task options have keys which help to identify them and customize better
    name        String
    goalType    String    // "do", "dont", "measurable", "time", "duration"
    defaultDays Int       @default(7) // every day by default
    measureUnit String?   // "km", "min", "hour" "times"
    defaultGoal Float?    // For measurable tasks
    description String?
    category    String?   // For task categorization
    tasks       Task[]
}

model Task {
  id              Int       @id @default(autoincrement())
  goal            Float?    // For measurable tasks (e.g., km to run)
  initialGoal     Float?    // To compare with the goal and measure progress
  initialDays     Int       @default(0) // To compare with the days and measure progress
  currentStreak   Int       @default(0)
  bestStreak      Int       @default(0)
  repeatSchedule  String    // cron string
  program         Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId       Int
  taskOption      TaskOption @relation(fields: [taskOptionId], references: [id], onDelete: Cascade)
  taskOptionId    Int
  taskProgress    TaskProgress[]
}

model TaskProgress {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  status      String    // "done", "skipped", "todo"
  value       Float?    // For measurable tasks
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int
}

model Achievement {
  id          Int       @id @default(autoincrement())
  name        String
  icon        String
  unlockedAt  DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  type        String    // "program_streak", "task_streak", "program_completion"
  threshold   Int       // 3, 7, 14, 30 for streaks; 1, 3, 5 for completions
}

model Settings {
  id              Int     @id @default(autoincrement())
  notifications   Boolean @default(true)
  theme           String  @default("system")
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int     @unique
}
